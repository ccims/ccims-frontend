fragment fLocationStub on IssueLocation {
  id
  name
  description
}

# basic information about a label
fragment fLabelStub on Label {
  id
  name
  color
}

fragment fAssigneeStub on User {
  id
  username
  displayName
}

# basic information about an issue that we can show e.g. in a list of issues
fragment fIssueStub on Issue {
  id
  title
  createdAt
  createdBy {
    id
    username
    displayName
  }
  lastUpdatedAt
  isOpen
  isDuplicate
  category
  components(first: 10) {
    totalCount
    pageInfo { ...allPageInfo }
    nodes {
      ...fComponentStub
    }
  }
  locations(first: 10) {
    totalCount
    pageInfo { ...allPageInfo }
    nodes {
      ...fLocationStub
    }
  }
  labels(first: 10) {
    totalCount
    pageInfo { ...allPageInfo }
    nodes {
      ...fLabelStub
    }
  }
  assignees(first: 10) {
    totalCount
    pageInfo { ...allPageInfo }
    nodes {
      ...fAssigneeStub
    }
  }
  participants(first: 10) {
    totalCount
    pageInfo { ...allPageInfo }
    nodes {
      ...fAssigneeStub
    }
  }
  linksToIssues(first: 10) {
    totalCount
    pageInfo { ...allPageInfo }
    nodes {
      ...on Issue {
        id
        title
        isOpen
        category
        linkedByIssues { totalCount }
        linksToIssues { totalCount }
      }
    }
  }
  linkedByIssues(first: 10) {
    totalCount
    pageInfo { ...allPageInfo }
    nodes {
      ...on Issue {
        id
        title
        isOpen
        category
        linkedByIssues { totalCount }
        linksToIssues { totalCount }
      }
    }
  }
  issueComments(first: 0) {
    totalCount
  }
}

fragment allPageInfo on PageInfo {
  startCursor
  endCursor
  hasNextPage
  hasPreviousPage
}

fragment issueListPage on IssuePage {
  totalCount
  pageInfo {
    ...allPageInfo
  }
  nodes {
    ...fIssueStub
  }
}

query ListProjectIssues($project: ID!, $after: String, $before: String, $filterBy: IssueFilter, $first: Int, $last: Int) {
  node(id: $project) {
    ...on Project {
      issues(after: $after, before: $before, filterBy: $filterBy, first: $first, last: $last) {
        ...issueListPage
      }
    }
  }
}

query ListComponentIssues($component: ID!, $after: String, $before: String, $filterBy: IssueFilter, $first: Int, $last: Int) {
  node(id: $component) {
    ...on Component {
      issues(after: $after, before: $before, filterBy: $filterBy, first: $first, last: $last) {
        ...issueListPage
      }
    }
  }
}

query ListComponentIssuesOnLocation($component: ID!, $after: String, $before: String, $filterBy: IssueFilter, $first: Int, $last: Int) {
  node(id: $component) {
    ...on Component {
      issuesOnLocation(after: $after, before: $before, filterBy: $filterBy, first: $first, last: $last) {
        ...issueListPage
      }
    }
  }
}

query ListComponentInterfaceIssuesOnLocation($interface: ID!, $after: String, $before: String, $filterBy: IssueFilter, $first: Int, $last: Int) {
  node(id: $interface) {
    ...on ComponentInterface {
      issuesOnLocation(after: $after, before: $before, filterBy: $filterBy, first: $first, last: $last) {
        ...issueListPage
      }
    }
  }
}

query ListIssueLinksToIssues($issue: ID!, $after: String, $before: String, $filterBy: IssueFilter, $first: Int, $last: Int) {
  node(id: $issue) {
    ...on Issue {
      linksToIssues(after: $after, before: $before, filterBy: $filterBy, first: $first, last: $last) {
        ...issueListPage
      }
    }
  }
}

query ListIssueLinkedByIssues($issue: ID!, $after: String, $before: String, $filterBy: IssueFilter, $first: Int, $last: Int) {
  node(id: $issue) {
    ...on Issue {
      linkedByIssues(after: $after, before: $before, filterBy: $filterBy, first: $first, last: $last) {
        ...issueListPage
      }
    }
  }
}

query ListArtifactIssues($artifact: ID!, $after: String, $before: String, $filterBy: IssueFilter, $first: Int, $last: Int) {
  node(id: $artifact) {
    ...on Artifact {
      issues(after: $after, before: $before, filterBy: $filterBy, first: $first, last: $last) {
        ...issueListPage
      }
    }
  }
}

fragment fArtifactStub on Artifact {
  id
  createdAt
  createdBy {
    id
    username
    displayName
  }
  component {
    id
    name
  }
  uri
  lineRangeStart
  lineRangeEnd
}

fragment fNonFunctionalConstraintStub on NonFunctionalConstraint {
  id
  createdAt
  createdBy {
    id
    username
    displayName
  }
  content
  description
  isActive
}

fragment fReactionsStub on ReactionGroupPage {
  totalCount
  pageInfo { ...allPageInfo }
  nodes {
    id
    reaction
    users(first: 5) {
      totalCount
      nodes {
        id
        username
        displayName
      }
    }
  }
}

fragment fComment on Comment {
  body
  createdAt
  createdBy {
    id
    username
    displayName
  }
  # TODO broken on backend; uncomment when fixed
  # currentUserCanEdit
  lastEditedAt
  reactions(first: 10) {
    ...fReactionsStub
  }
}

fragment fTimelineItem on IssueTimelineItem {
  id
  createdAt
  createdBy {
    id
    username
    displayName
  }
  ...on AddedToComponentEvent {
    component {
      id
      name
    }
  }
  ...on AddedToLocationEvent {
    location {
      id
      name
    }
  }
  ...on AssignedEvent {
    assignee {
      id
      username
      displayName
    }
  }
  ...on CategoryChangedEvent {
    oldCategory
    newCategory
  }
  ...on DueDateChangedEvent {
    oldDueDate
    newDueDate
  }
  ...on DeletedIssueComment {
    deletedAt
    deletedBy {
      id
      username
      displayName
    }
  }
  ...on EstimatedTimeChangedEvent {
    oldEstimatedTime
    newEstimatedTime
  }
  ...on LabelledEvent {
    label {
      ...fLabelStub
    }
  }
  ...on IssueComment {
    ...fComment
  }
  ...on MarkedAsDuplicateEvent {
    originalIssue {
      ...fIssueStub
    }
  }
  ...on LinkEvent {
    linkedIssue {
      ...fIssueStub
    }
  }
  ...on PinnedEvent {
    component {
      id
      name
    }
  }
  ...on ReferencedByIssueEvent {
    mentionedAt {
      ...fIssueStub
    }
    mentionedInComment {
      id
      createdBy {
        id
        username
        displayName
      }
    }
  }
  ...on PriorityChangedEvent {
    oldPriority
    newPriority
  }
  ...on RemovedFromComponentEvent {
    removedComponent {
      id
      name
    }
  }
  ...on ReferencedByOtherEvent {
    component {
      id
      name
    }
    source
    sourceURL
  }
  ...on RemovedFromLocationEvent {
    removedLocation {
      id
      name
    }
  }
  ...on StartDateChangedEvent {
    oldStartDate
    newStartDate
  }
  ...on RenamedTitleEvent {
    oldTitle
    newTitle
  }
  ...on UnassignedEvent {
    removedAssignee {
      id
      username
      displayName
    }
  }
  ...on UnlabelledEvent {
    removedLabel {
      ...fLabelStub
    }
  }
  ...on WasLinkedEvent {
    linkedBy {
      ...fIssueStub
    }
  }
  ...on WasUnlinkedEvent {
    unlinkedBy {
      ...fIssueStub
    }
  }
  ...on UnpinnedEvent {
    component {
      id
      name
    }
  }
  ...on UnlinkEvent {
    removedLinkedIssue {
      ...fIssueStub
    }
  }
  ...on AddedArtifactEvent {
    artifact {
      ...fArtifactStub
    }
  }
  ...on RemovedArtifactEvent {
    removedArtifact {
      ...fArtifactStub
    }
  }
  ...on AddedNonFunctionalConstraintEvent {
    nonFunctionalConstraint {
      ...fNonFunctionalConstraintStub
    }
  }
  ...on RemovedNonFunctionalConstraintEvent {
    removedNonFunctionalConstraint {
      ...fNonFunctionalConstraintStub
    }
  }
}

query GetIssueHeader($id: ID!) {
  node(id: $id) {
    ...on Issue {
      ...fIssueStub
      body
      lastEditedAt
      reactions(first: 10) {
        ...fReactionsStub
      }
      # FIXME these are broken for some reason
      #currentUserCanComment
      #currentUserCanEdit

      startDate
      dueDate
      estimatedTime
      spentTime

      timeline(first: 20) {
        totalCount
        nodes {
          ...fTimelineItem
        }
      }
    }
  }
}

query ListIssueTimelineItems($id: ID!, $after: String, $before: String, $filterBy: IssueTimelineItemFilter, $first: Int, $last: Int) {
  node(id: $id) {
    ...on Issue {
      timeline(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...fTimelineItem
        }
      }
    }
  }
}

query ListProjectLabels($project: ID!, $after: String, $before: String, $filterBy: LabelFilter, $first: Int, $last: Int) {
  node(id: $project) {
    ...on Project {
      labels(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...fLabelStub
        }
      }
    }
  }
}
query ListComponentLabels($project: ID!, $after: String, $before: String, $filterBy: LabelFilter, $first: Int, $last: Int) {
  node(id: $project) {
    ...on Component {
      labels(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...fLabelStub
        }
      }
    }
  }
}
query ListIssueLabels($issue: ID!, $after: String, $before: String, $filterBy: LabelFilter, $first: Int, $last: Int) {
  node(id: $issue) {
    ...on Issue {
      labels(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...fLabelStub
        }
      }
    }
  }
}

query ListIssueLocations($issue: ID!, $after: String, $before: String, $filterBy: IssueLocationFilter, $first: Int, $last: Int) {
  node(id: $issue) {
    ...on Issue {
      locations(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...fLocationStub
        }
      }
    }
  }
}

query ListIssueComponents($issue: ID!, $after: String, $before: String, $filterBy: ComponentFilter, $first: Int, $last: Int) {
  node(id: $issue) {
    ...on Issue {
      components(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...fLocationStub
        }
      }
    }
  }
}

query ListIssueParticipants($issue: ID!, $after: String, $before: String, $filterBy: UserFilter, $first: Int, $last: Int) {
  node(id: $issue) {
    ...on Issue {
      participants(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...on User {
            id
            username
            displayName
          }
        }
      }
    }
  }
}

query ListIssueAssignees($issue: ID!, $after: String, $before: String, $filterBy: UserFilter, $first: Int, $last: Int) {
  node(id: $issue) {
    ...on Issue {
      assignees(
        after: $after,
        before: $before,
        filterBy: $filterBy,
        first: $first,
        last: $last
      ) {
        totalCount
        pageInfo {
          ...allPageInfo
        }
        nodes {
          ...on User {
            id
            username
            displayName
          }
        }
      }
    }
  }
}

mutation MutCreateIssue($issue: CreateIssueInput!) {
  createIssue(input: $issue) {
    issue {
      ...fIssueStub
    }
  }
}

mutation MutRenameIssueTitle($id: String, $issue: ID!, $title: String!) {
  renameIssueTitle(input: {
    clientMutationID: $id,
    issue: $issue,
    newTitle: $title
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutCloseIssue($id: String, $issue: ID!) {
  closeIssue(input: {
    clientMutationID: $id,
    issue: $issue
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutReopenIssue($id: String, $issue: ID!) {
  reopenIssue(input: {
    clientMutationID: $id,
    issue: $issue
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutAddIssueComment($id: String, $issue: ID!, $body: String!) {
  addIssueComment(input: {
    clientMutationID: $id,
    issue: $issue,
    body: $body
  }) {
    comment {
      ...fComment
    }
  }
}

mutation MutUpdateIssueComment($id: String, $comment: ID!, $body: String!) {
  updateComment(input: {
    clientMutationID: $id,
    comment: $comment,
    body: $body
  }) {
    comment {
      ...fComment
    }
  }
}

mutation MutDeleteIssueComment($id: String, $comment: ID!) {
  deleteIssueComment(input: {
    clientMutationID: $id,
    issueComment: $comment
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutAddIssueLabel($id: String, $issue: ID!, $label: ID!) {
  addLabelToIssue(input: {
    clientMutationID: $id,
    issue: $issue,
    label: $label
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutRemoveIssueLabel($id: String, $issue: ID!, $label: ID!) {
  removeLabelFromIssue(input: {
    clientMutationID: $id,
    issue: $issue,
    label: $label
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutAddIssueToComponent($id: String, $issue: ID!, $component: ID!) {
  addIssueToComponent(input: {
    clientMutationID: $id,
    issue: $issue,
    component: $component
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutRemoveIssueFromComponent($id: String, $issue: ID!, $component: ID!) {
  removeIssueFromComponent(input: {
    clientMutationID: $id,
    issue: $issue,
    component: $component
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutAddIssueToLocation($id: String, $issue: ID!, $location: ID!) {
  addIssueToLocation(input: {
    clientMutationID: $id,
    issue: $issue,
    location: $location
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutRemoveIssueFromLocation($id: String, $issue: ID!, $location: ID!) {
  removeIssueFromLocation(input: {
    clientMutationID: $id,
    issue: $issue,
    location: $location
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutAddIssueAssignee($id: String, $issue: ID!, $assignee: ID!) {
  addAssignee(input: {
    clientMutationID: $id,
    issue: $issue,
    user: $assignee
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutRemoveIssueAssignee($id: String, $issue: ID!, $assignee: ID!) {
  removeAssignee(input: {
    clientMutationID: $id,
    issue: $issue,
    user: $assignee
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutLinkIssue($id: String, $issue: ID!, $link: ID!) {
  linkIssue(input: {
    clientMutationID: $id,
    issue: $issue,
    issueToLink: $link
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutUnlinkIssue($id: String, $issue: ID!, $link: ID!) {
  unlinkIssue(input: {
    clientMutationID: $id,
    issue: $issue,
    issueToUnlink: $link
  }) {
    event {
      ...fTimelineItem
    }
  }
}

mutation MutCreateLabel($id: String, $name: String!, $description: String, $color: Color!, $components: [ID!]!) {
  createLabel(input: {
    clientMutationID: $id,
    components: $components,
    name: $name,
    description: $description,
    color: $color
  }) {
    label {
      ...fLabelStub
    }
  }
}
mutation MutUpdateLabel($id: String, $label: ID!, $name: String, $description: String, $color: Color) {
  updateLabel(input: {
    clientMutationID: $id,
    label: $label,
    name: $name,
    description: $description,
    color: $color
  }) {
    label {
      ...fLabelStub
    }
  }
}
mutation MutAddLabelToComponent($id: String, $label: ID!, $component: ID!) {
  addLabelToComponent(input: {
    clientMutationID: $id,
    label: $label,
    component: $component
  }) {
    clientMutationID
  }
}
mutation MutRemoveLabelFromComponent($id: String, $label: ID!, $component: ID!) {
  removeLabelFromComponent(input: {
    clientMutationID: $id,
    label: $label,
    component: $component
  }) {
    clientMutationID
  }
}
mutation MutDeleteLabel($id: String, $label: ID!) {
  deleteLabel(input: {
    clientMutationID: $id,
    label: $label
  }) {
    clientMutationID
  }
}
